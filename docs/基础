变量声明
var varName varType

简短声明(只能在函数体内部使用)
varName := value
e.g.
a := 1
b := "string1"
a,b := 1,2

常量定义：
const PI = 3.1415926
const hello string = "hello"   //可以对常量加上类型限制

array类型声明
var x [10]int
x[1] = 9
x[8] = 10

或简短声明：
x := [10]int{1,2,3}


slice类型声明
var x []int
简短声明（需要make来分配空间）
x := make([]int,10,20)  //10表示len为10， 20表示cap为20

也可以从已有的array或slice来声明
a := [10]int{1,2,3,4}
x := a[1:3]          //这种方式是指针传递，如果修改了x中元素的值，a中对应的元素也会改变
x[0] = [10]          //这样的话a会变成[1,10,3,4]


slice共享内存问题（重点理解）：
先声明一个slice变量a:
a := make([]int,3,5) //长度是3， 容量是5

a1 := a              //将a1也声明为slice，此时a1和a指向相同的内存地址（注意只是相同的内存地址，变量属性仍然是自己的，比如len）
a1 = append(a1,10)   //向a1中添加元素10，此时a1的len变为4（a的len仍为3），此时a1值为[0,0,0,10], a的值仍为[0,0,0]
a1[0] = 5            //由于目前仍指向同一个内存地址，a的相应值也会改变，a=[5,0,0],a1=[5,0,0,10]
a1 = append(a1,20)   //此时a1=[5,0,0,10,20], a=[5,0,0], len(a1)=5, 已经等于cap(a1),如果再添加元素则会面临重新开辟内存
a1 = append(a1,30)   //此时len(a1)为6，已超出原来的容量，需要重新开辟内存，大小为当前len的两倍（12）,此时a和a1不再共享内存地址
a1[0] = 100          //此时a1=[100,0,0,10,20,30],a=[5,0,0]
